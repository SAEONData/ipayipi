% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/y_h0_dt_process.R
\name{dt_process}
\alias{dt_process}
\title{Pipeline data: processing --- \emph{dt}}
\usage{
dt_process(
  station_file = NULL,
  pipe_house = NULL,
  pipe_seq = NULL,
  stages = NULL,
  output_dt_preffix = "dt_",
  output_dt_suffix = NULL,
  overwrite_pipe_memory = FALSE,
  unwanted_tbls = "_tmp",
  verbose = FALSE,
  xtra_v = FALSE,
  chunk_v = FALSE,
  dt_format = c("Ymd HMOS", "Ymd HMS", "Ymd IMOSp", "Ymd IMSp", "ymd HMOS", "ymd HMS",
    "ymd IMOSp", "ymd IMSp", "mdY HMOS", "mdY HMS", "mdy HMOS", "mdy HMS", "mdy IMOSp",
    "mdy IMSp", "dmY HMOS", "dmY HMS", "dmy HMOS", "dmy HMS", "dmy IMOSp", "dmy IMSp"),
  dt_tz = "Africa/Johannesburg",
  ...
)
}
\arguments{
\item{station_file}{Name of the station being processed.}

\item{pipe_house}{List of pipeline directories. \emph{See} \code{\link[=ipip_house]{ipip_house()}} \emph{for details}.}

\item{pipe_seq}{A \code{pipe_seq} object descirbes sequential data processing stages and steps in iPayipi. A \code{pipe_seq} can be build using \code{ipayipi::pipe_seq()}. Defaults to \code{NULL}.
\itemize{
\item If this argument is provided, then upon its successful evaluation, the \code{pipe_seq} is embedded a respective station file with associated metadata.
\item If this argument is not provided then the embedded \code{pipe_seq} (if there is one) will be used for data processing. To overwrite an existing stations \code{pipe_seq} set \code{overwrite_pipe_memory} to \code{TRUE}, and provide the new \code{pipe_seq} object to this argument.
}}

\item{stages}{Integer vector denoting the consecutive stages of the \code{pipe_seq} object to process. Can be used to split a processing pipeline to allow additional processing between stages in the interlude (note: each stage contains multiple steps).  Set to \code{0} (zero) for only running \code{pipe_seq} evaluation.}

\item{output_dt_preffix}{The output table preffix which defaults to "dt_".}

\item{output_dt_suffix}{A custom suffix to be appended to the output tables name.}

\item{overwrite_pipe_memory}{Logical. If \code{TRUE} then the stations pipeline steps, that are described by the \code{pipe_seq} object/table, are overwritten by the new \code{pipe_seq} object.}

\item{unwanted_tbls}{Some tables generated by the processing pipeline don't need to be stored permanently in the station file object. By adding keywords to this argument (separated by the '|' character) these 'unwanted' (or temporary) tables will be removed from the station file. Defaults to \verb{_tmp} --- so any table with this search key in its name will be removed.}

\item{verbose}{Logical. Print some details and progress of function progress?}

\item{xtra_v}{Logical. Should some 'x'tra messaging be done? Use to help diagnose problems, and for guidance.}

\item{dt_format}{The function attempts to work out the date-time format from a vector of format types supplied to this argument. The testing is done via \code{\link[lubridate:parse_date_time]{lubridate::parse_date_time()}}. \code{\link[lubridate:parse_date_time]{lubridate::parse_date_time()}} prioritizes the tesing of date-time formats in the order vector of formats supplied. The default vector of date-time formats supplied should work well for most logger outputs. \bold{NB!} seconds are required.}

\item{dt_tz}{Recognized time-zone (character string) of the data locale. The default for the package is South African, i.e., "Africa/Johannesburg" which is equivalent to "SAST".}
}
\description{
Process data in sequential steps generated by \code{ipayipi::pipe_seq()}.
}
\details{
This function is called by \code{\link[=dt_process_batch]{dt_process_batch()}} and its documentation described therein.
}
\author{
Paul J. Gordijn
}
\keyword{data}
\keyword{pipeline;}
\keyword{processing}
\keyword{processing;}
\keyword{steps}
