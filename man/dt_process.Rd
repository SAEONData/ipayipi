% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/z_h0_station_dt_process.r
\name{dt_process}
\alias{dt_process}
\title{Pipeline data processing: \emph{dt}}
\usage{
dt_process(
  station_file = NULL,
  pipe_house = NULL,
  pipe_seq = NULL,
  output_dt_preffix = "dt_",
  output_dt_suffix = NULL,
  overwrite_pipe_memory = FALSE,
  verbose = FALSE,
  unwanted_tbls = "_tmp",
  ...
)
}
\arguments{
\item{station_file}{Name of the station being processed.}

\item{pipe_house}{List of pipeline directories. \strong{See} \code{ipayipi::ipip_init()} \strong{for details}.}

\item{pipe_seq}{Generated processing pipeline structure performed by \code{ipayipi::pipe_seq()}.}

\item{output_dt_preffix}{The output table preffix which defaults to "dt_".}

\item{output_dt_suffix}{A custom suffix to be appended to the output tables name.}

\item{overwrite_pipe_memory}{Logical. If TRUE then extant pipeline steps, which are summarised in the 'pipe_process_summary' data table (\emph{see
details}), are modified by arguments in the pipe_process argument.}
}
\description{
Process data in sequential steps generated by \code{ipayipi::pipe_seq()}.
}
\details{
This function forms the basis of setting up a sequential data processing pipeline. This allows the extraction and preparation of raw, or other data from a data table in an 'ipayipi' station file, and further processing of this data.

The first part of the processing stage of the \code{ipayipi} data pipeline is to set up a pipe stage and step sequence using \code{ipayipi::pipe_seq()}. Once the sequence is set up it can be parsed to \code{ipayipi::dt_process()}. The four main functions that \code{ipayipi::dt_process()} uses to process data are:
\itemize{
\item \code{dt_harvest}: for harvesting station/other data.
\item \code{dt_calc_chain}: running \code{data.table} chained calculations on data.
\item \code{dt_agg}: Aggregate phenomena/variables by custom or default functions.
Defaults are based on the phenomena descriptions in \code{phens} tables, i.e., their measure, variable type, and units.
\item \code{dt_join}: Used to merge harvested data sets together via simple and more comlex fuzzy type joins using \code{data.table}.
These functions can be specified in the \code{pipe_seq} function. \code{pipe_seq} will itself run some basic checks on the pipeline structure and to help ensure smooth running of the processing. More complex checks on the structure of the pipeline are done in the \code{dt_process} function using full evaluation of the functions mentioned above. During this process station data (both external for external harvesting) and the station wherein data are being processed are opened and new phenomena descriptions are  generated. Function parameters are also generated for each of the functions above. All this to minimise potential error during the actual data processing performed by the functions above.
Processed data, function parameters, and new phenomena summariies are returned and appended to station files for future use.
}
}
\author{
Paul J. Gordijn
}
\keyword{data}
\keyword{pipeline;}
\keyword{processing}
\keyword{processing;}
\keyword{steps}
