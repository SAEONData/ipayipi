% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/z_b_imbibe_raw_logger_dt.R
\name{imbibe_raw_logger_dt}
\alias{imbibe_raw_logger_dt}
\title{Imbibes logger data exports}
\usage{
imbibe_raw_logger_dt(
  pipe_house = NULL,
  file_path = NULL,
  file_ext = NULL,
  col_dlm = NULL,
  dt_format = c("Ymd HMOS", "Ymd HMS", "Ymd IMOSp", "Ymd IMSp", "ymd HMOS", "ymd HMS",
    "ymd IMOSp", "ymd IMSp", "mdY HMOS", "mdY HMS", "mdy HMOS", "mdy HMS", "mdy IMOSp",
    "mdy IMSp", "dmY HMOS", "dmY HMS", "dmy IMOSp", "dmy IMSp"),
  dt_tz = "Africa/Johannesburg",
  record_interval_type = "continuous",
  max_rows = 1000,
  data_setup = NULL,
  remove_prompt = FALSE,
  logg_interfere_type = "on_site",
  verbose = FALSE,
  xtra_v = FALSE,
  ...
)
}
\arguments{
\item{pipe_house}{List of pipeline directories. \strong{See} \code{ipayipi::ipip_house()} \strong{for details}.}

\item{file_path}{Path and name of file (excluding the file extension).}

\item{file_ext}{The file extension defaults of the raw logger data files. This can be left as \code{NULL} so 'all' files but those with extensions that cannot be imbibed (".ipr|.ipi|.iph|.xls|.rps|.rns|.ods|.doc").}

\item{col_dlm}{The column delimter which is fed to \code{data.table::fread()}. Defaults to NULL. When \code{NULL} the function uses \code{data.table::fread} ability to 'guess' the delimeter.}

\item{dt_format}{The function attempts to work out the date-time format from a vector of format types supplied to this argument. The testing is done via \code{lubridate::parse_date_time()}. \code{lubridate::parse_date_time()} prioritizes the tesing of date-time formats in the order vector of formats supplied. The default vector of date-time formats supplied should work well for most logger outputs.}

\item{dt_tz}{Recognized time-zone (character string) of the data locale. The default for the package is South African, i.e., "Africa/Johannesburg" which is equivalent to "SAST".}

\item{record_interval_type}{If there are is no discrete record interval set in the logger program, i.e., the sampling is event-based, then this parameter must be set to "event_based". By default this function has this parameter set to "continuous", but the record interval is scrutinized by 'ipayipi::record_interval_eval()' --- see the help files for this function for more information.
The parameter supplied here is only used if there is only one data record and the record interval cannot be evaluated by \code{ipayipi::record_interval_eval()}.}

\item{data_setup}{List of options used to extract data and metadata from instrument data outputs. These arguments are parsed to \code{\link{imbibe_raw_flat}}.}

\item{remove_prompt}{Logical; passed to \code{ipayipi::record_interval_eval()}. Activate a readline prompt to choose whether or not filter our records from \code{dta_in} with inconsistent record intervals.}

\item{logg_interfere_type}{Two options here: "remote" or "on_site". Each time a logger is visited is counted as a logger interference event. Type \emph{'remote'} occurs when data is downloaded remotely. Type \emph{'on_site'} is when data was downloaded on site. \emph{See details} ...}

\item{verbose}{Logical passed to \code{attempt::attempt()} which reads the logger text file in with either \code{data.table::fread()} or base R. Also whether to print progress.}
}
\value{
A list of class "ipayipi_raw_data" that contains a 'data_summary', 'phens' (phenomena), and 'raw_data' tables (data.table).
}
\description{
Function to read in 'flat' loggers files into R. A first step towards processing data in \code{ipayipi}.
}
\details{
This function uses \code{data.table::fread} for flat text files, which is optimized for processing 'big data'. Apart from usual the usual options which can be parsed to \code{data.table::fread} this function generates some standardised metadata to complement the read from a logger data table (if \code{data.table::fread()} is unsuccessful \code{base::read.csv()} is used). This metadata may vary from one logger output to another. To cater for this variation this function requires a \code{data_setup} to be completed. Once setup this can be used as a standard for further imports.
There is support for 'xml' formatted Solonist 'xle' format files with a default \code{data_setup} that is parsed automatically for files with the '.xle' extension.

This function attempts to check whether the recording interval in the data date-time stamp has been consistent. A prompt is called if there are inconsistent time intervals between record events, and data rows with inconsistent time intervals will be removed if approved.
A basic check is performed to check the success of converting date-time values to a recognised format in R (i.e., POSIXct).
Regarding the \code{logg_interfere_type} parameter. Owing to potential interference of sensors etc when downloading data 'on site' or logger related issues when data is sent/obtained remotely, the date-time stamps of these events must be preserved. A \code{logg_interfere} data table is generated for this purpose and stored with the data. This data cannot necessarily be extracted from the 'data_summary' once data has been appended as some of this data will be overwritten during the appending process. The purpose of the 'logg_interfere' table is to retain this information, which is used by \code{ipayipi} for further processing.
}
\author{
Paul J. Gordijn
}
