% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/gw_d_baro_comp.R
\name{gw_baro_comp}
\alias{gw_baro_comp}
\title{Barometric compensation}
\usage{
gw_baro_comp(
  input_file = NULL,
  baro_file = NULL,
  pull_baro = FALSE,
  overwrite_baro = FALSE,
  overwrite_comp = FALSE,
  wk_dir = ".",
  InasRDS = TRUE,
  rdta_log = TRUE,
  start_t = NULL,
  end_t = NULL,
  join_tolerance = NULL,
  na_thresh = 5,
  overwrite_t_bt_level = FALSE,
  dt_format = c("Ymd HMS", "Ymd IMSp", "ymd HMS", "ymd IMSp", "mdY HMS", "mdy IMSp",
    "dmY HMS", "dmy IMSp"),
  dt_tz = "Africa/Johannesburg",
  ...
)
}
\arguments{
\item{input_file}{Required input level file - either as character or object
in the R environment.}

\item{baro_file}{Optional specificed barologger file. If not specified then
the level file is checked for the last used baro file. Or the file is
queried from the rdta_log if this option is set to TRUE below. Can be either
character or object in the R environment.}

\item{pull_baro}{If TRUE the function will automatically search for baro data
in the working directory. The transfer log will be opened and the barologger
therein used. If FALSE then a baro_file must be specified.}

\item{overwrite_baro}{Overwrite previous barologger data in the input_file.
If users have cleaned (removed outliers etc) the baro data in the level file
then this should be set to F. Note that when overwriting, data gaps can
still be infilled - of potential duplicates, the originals will only be
overwritten if overwrite_baro is set to TRUE.}

\item{overwrite_comp}{Overwrite and recalculate compensated data in the
input_file.}

\item{wk_dir}{If reading RDS files, input directory is required.}

\item{InasRDS}{Is the input format RDS (the alternate option is an object in
the R env).}

\item{rdta_log}{If true the rdta.log will be pulled from the working
directory and used to query the barologger name by serial number for the
baro log.}

\item{start_t}{Optional query dates for baro data extraction. Format
strictly "\%Y-\%m-\%d \%H:\%M:\%OS".}

\item{end_t}{See \strong{start_t}.}

\item{join_tolerance}{To join the barologger and levellogger data an
interval join is performed. With greater tolerance, the time interval for
the join increases however, the tolerance will automatically be set to be
90 \% of the smallest sample rate which has been used for a borehole or site.}

\item{na_thresh}{When joining the barologger and levellogger data, NAs are
coerced if Date_time stamps don't match. A warning is generated if the
number of NA's exceeds this threshold.}

\item{overwrite_t_bt_level}{Overwrite the transformed baro data? If TRUE,
the transformed bt level data will be overwritten. If False, this data will
not be overwritten.}

\item{dt_format}{The function guesses the date-time format from a vector of
format types supplied to this argument. The 'guessing' is done via
\code{lubridate::parse_date_time()}. \code{lubridate::parse_date_time()} prioritizes
the 'guessing' of date-time formats in the order vector of formats
supplied. The default vector of date-time formats supplied should work
well for most logger outputs.}

\item{dt_tz}{Recognized time-zone (character string) of the data locale. The
default for the package is South African, i.e., "Africa/Johannesburg" which
is equivalent to "SAST".}
}
\value{
Screen print of the solonist logger file that was compensated.
}
\description{
Use barometric data to compensate for atmospheric pressure
induced variability in pressure transducer measurements.
}
\details{
This function, being designed as part of the package pipeline,
follows the following steps.
\itemize{
\item Connect to the desired baro logger file. The connection will be made
automatically if a previous entry has been made in the log_baro_log table.
Otherwise, if working within the designed pipeline, the function will extract
the barologger information from the rdta_log file in the working directory.
\item Optional setting of start and end dates which you would like to
compensate. These dates will be used to query data from the barologger file.
If left NULL the min max date_time ranges of the respective level file and
barologger data file will be used - see below.
\item Set the start and end dates to match the time ranges of input data
and/or the customised input dates.
\item Before barometrically compensating the data, the level data is pushed
to a new table where transformations/calculations are performed. The
date-time values of the level data are used as an id column in querying the
barometric data. If in this query there are more than a user specified
limit of NA values (e.g. resulting from mismatchning date-time values) the
query will stop. The user will have to manually correct the mismatching
date-time values using a floor function or something similar to minimise
the discrepancy. For applying this function automatically to all RDS files
in the solonist_dta folder, the batch_baro_comp function can be used.
}
}
\examples{
##' This function is used within the 'batch_baro' function. It can be used
#' to compensate individual level logger files as well.
#' An example will be provided once data has been added to the package.
2 Import data files - baro and water level
2.1 rds import
Try and read in the rds file
Read in rdta_log file - used to query the barologger file name
Get and organise barologger data
 if pull_baro = TRUE then get the transfer log file.
 This RDS file has a column for specifying what barologger file
 should be used. If there is none specified, then the last
 barologger file that was used in the level file will be pulled.
 the level file R object
First we check the rdta_log for a baro file name.
get the last baro_file name that was used.
If pull_baro == F then check whether we have a user declared baro_file
Read in the barologger data
2.2 r env data import option
Check whether data classes have been defined correctly
Check whether there is baro and working data in the chosen files
3 Append and join data
The approach taken to append and join data is based on a number of
criteria.
 Users can specify whether they would like to overwrite the existing
 barologger data in the level file. This would remove any edits they
 have made in cleaning the data. However, this would be desirable if
 you needed to fill gaps in the data. An interval cleaning function
 would therefore be desirable to clean intervals automatically.
This section takes the following steps
 3.1. Get: start and end dates
  Aim: Get the start and end dates of the data to be added from the
        input baro data.
        This is based on the data ranges of the input baro data,
        the water level data in the level file, optional user specified
        dates and date logic e.g. is the end date older than the start
        date?
       In this section a baro log is also created so that the baro data
       transferred to the level file can be traced.
    3.1.1 - get start & end dates of the input baro data
    3.1.2 - get start & end dates of the baro data in the level logger
            file
    3.1.3 - generate baro name log of the level logger file
    3.1.4 - get the start and end dates of the water
            level log in the input level file
    3.1.5 - use user optional input dates to trim start and end dates
            of start and end times
    3.1.6 - trim the start and end dates by the range of date time in
            the input level data (1.4)
    3.1.7 - trim start and end dates by the range of date time in the
            input baro data file
   3.1.8 - veryify start and end dates
 3.2. Filter: Start -> End baro and level data
    3.2.1 - filter baro data in the level file
    3.2.2 - filter input baro log
    3.2.3 - Filter input baro data
 3.3. Merge data
    3.3.1 - Merge baro data
    3.3.2 - Remove duplicates whereever necessary
    3.3.3 - Generate an updated baro log for the level file
 3.4 Join baro and level data
    3.4.1 - remove temperature column in baro table
    3.4.2 - Create a temporary baro-level join file
    3.4.3 - Check for join errors
 3.5 Joined data --> level_file
 4.1 Compensation
    4.1.1 - Coerce NA"s to zero"s for calculations
    4.1.2 - Query baro model offset
    4.1.3 - Calculate barometrically compensated water level
5 SAVE DATA
3.1 Get: start and end dates
 *3.1.1 - Get start and end date times of the new input baro data
 *3.1.2 - get start & end dates of the baro data in the level logger file
If there is barologger data in the level logger file
 retreive the start and end dates.
var to indicate whether there is baro data in the level file
*3.1.3 - Add metadata via data.table overlap join query to
         the level logger barologger info - this will be seperated
         later into a log and data file.
F means that there is no baro data in the level logger file R object
*3.1.4 - get the start and end dates of the water level
         log in the input level file
*3.1.5 - use user optional input dates to trim
         start and end dates of start and end times
If no start and end is defined use min and max date times...
*3.1.6 - trim the start and end dates by the range of date time
         in the input level data (3.1.4)
*3.1.7 - trim start and end dates by the range of date time
          in the input baro data file
Trim the start and end date time values if these extend beyond the
 barologger data date time values
*3.1.8 - veryify start and end dates
Check whether the start and end date times make sense
 --continue with compensation if so...
3.2 Filter: Start -> End baro and level data
Now that the start and end dates have been checked we can filter the
 data sets by the adjusted start and end date-times before appending
 these.
 For processing with overwrite = TRUE, the data in the level files must
 be removed (filtered) first. If overwrite is false, the data can be
 merged and the non-distinct records removed.
*3.2.1 - filter baro data in the level file
 First work with the input baro data.
 If there is baro data in the level logger file [level_baro == TRUE]
 this needs to be filtered if overwrite_baro is true.
level baro was a variable defined above indicating the presence of
baro data in the level file.
Filter the temporary baro log data generated in the query above
 lev_baro is the baro data in the input (working) level file
Now create a joined log and data file for the input barologger data
baro_baro = the data to import into the level/working file
 this is therefore not original
*3.2.2 - filter input baro data
Filter the input baro data by the start and end dates in the input.
*3.2.3 - Append filtered baro data
Now append the actual baro data into the working level file
 If there is baro data in the level file and we don't want to
 overwrite it
Filter the baro in data to remove duplicate records
3.3 Merge baro data
*3.3.1 - Merge baro data
If there is baro data in the level file append this data
*3.3.2 - Remove duplicates whereever necessary
 If overwrite_baro is set to TRUE then original baro data duplicates
  in the working or levellogger file
  will be overwritten. If overwirte_baro is FALSE then only unoriginal
  duplicates are removed.
Identify duplicate records (by date-time)
Remove duplicates
*3.3.3 - Generate an updated baro log for the level file
Summarise the baro_baro file into a log format
Create a table of barologger names and serial numbers that can be joined
to the baro_baro_log
If there is an rdta_log then use this to generate a table that can be
 used in a query to identify logger details.
Attached the newly generated baro_baro_log into the level or working file
Insert updated baro data and baro log into the level file (working file)
3.4 Join baro and level data
  Now the updated baro data is in the working file.
  Join baro and level data into a single r table
*3.4.1 - remove temperature column in baro table
 First, the temperature column in the barometric table is removed
*3.4.2 - Create a temporary baro-level join file
Join the baro data to the baro$log_data under another name -
 "merged_work_baro"
Before the merge the working data is filtered by the
start and end date times
The data will be joined to a generated sequence to match the
 shortest possible shared sample rate of the barologger and level logger.
*3.4.3 - Check for join errors
Count the number of NA values in the merged data
 NAs will result from mismatching dates.
 This function will not correct the dates, rather the
 input baro data and or level logger data needs to be fixed.
3.5 Joined data --> level_file
Remove data from the "working" file if overwrite_comp is T
remove overlapping data from the temp merged file if
 overwrite compensated data is FALSE
4.1 Compensation
 The barometric compensation can begin.
 Things to check.
  1. Whether the user wanted to overwrite existing barometric
      compensation values. This would have been specificed as
      overwrite_comp T or F
  2. Whether there are any offsets necessary for updated the
     calculated level. For older loggers there was a 9.5m offset -
     will have to watch for this.
*4.1.1 Now that the data is appended in the working$log_t table
 I can proceed with the barometric compensation.
*4.1.2 - Query baro model offset
Need to query the baro model names to add a 9.5 m offset for
  older models. This is done with data.tables foverlaps function
First the tables are set to data.table's
Get the column names which will be used to define the final table
This is the table that we will be joing to the log_t data
A dummi column is set to define the interval of interest for
the log_t table
Data.table needs identified keys for the joining operation,
 these are the time intervals
 for each row in both tables
The overlap join and selecting columns
Generate an offest column using the level logger model
*4.1.3 - Calculate barometrically compensated water level
Add the compensated values to the working object
Remove the queried Baro model numbers and model offset columns
*5 Save data
Save the working level file that has the compensated values.
}
\author{
Paul J Gordijn
}
\keyword{barometric}
\keyword{compensation;}
