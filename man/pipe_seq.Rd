% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/z_sub_dt_pipe_process_pipe_seq.r
\name{pipe_seq}
\alias{pipe_seq}
\title{Generate data processing pipeline}
\usage{
pipe_seq(
  p = NULL,
  pipe_eval = TRUE,
  output_dt_preffix = "dt_",
  output_dt_suffix = "_n",
  ...
)
}
\arguments{
\item{p}{Processing pipeline generated by \code{ipayipi::p_step()} nested
within \code{ipayipi::p_dt()}.}

\item{pipe_eval}{Logical. If TRUE then basic checks are done on the
processing steps to ensure all parameters are filled and correct.}

\item{output_dt_preffix}{Defaults to "_dt". Must only be changed if
absolutely necessary.}

\item{output_dt_suffix}{Defaults to "_n". Not yet fully implemented.}
}
\value{
Data processing pipeline in the format of a \code{data.table} of
class "pipe_seq".
}
\description{
Accepts a list of parameters corresponding to pipeline
processing steps, each compiled by \code{ipayipi::p_dt}.
}
\examples{
## generate a basic processing pipeline

# first harvest data
# note the aggregation period is specified in the harvesting step
# as data is harvested based on the specified time interval
pipe_seq1 <- pipe_seq(p = pdt(
   p_step(
     dt_n = 1,
     dtp_n = 1,
     f = "dt_harvest",
     f_params = hsf_param_eval(),
     time_interval = "month"),
# then aggregate data by month
   p_step(
     dt_n = 1,
     dtp_n = 2,
     f = "dt_agg",
     f_params = agg_param_eval(
       rain_tot = agg_params(phen_out_name = "rain",
         agg_f = "mean(x)", units = "mm", measure = "avg"),
         agg_offset = c("0 sec", "0 sec"), all_phens = TRUE))))
print(pipe_seq1)


}
\author{
Paul J. Gordijn
}
