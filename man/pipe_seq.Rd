% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/z_sub_dt_pipe_process_pipe_seq.r
\name{pipe_seq}
\alias{pipe_seq}
\title{Build data processing pipelines}
\usage{
pipe_seq(p = NULL, pipe_eval = TRUE, ...)
}
\arguments{
\item{p}{Processing pipeline steps, each generated by \code{ipayipi::p_step()} parsed by \code{ipayipi::p_dt()}. \emph{See examples}_.}

\item{pipe_eval}{Logical. If TRUE then basic checks are done on the processing steps to ensure all parameters are filled and correct.}
}
\value{
Data processing pipeline in the format of a \code{data.table} of class "pipe_seq".
}
\description{
Builds a pipeline from processing \emph{steps} nested within pipeline \emph{stages}. Each stage, with its respective steps, are partially evaluated by this function.
}
\details{
This function assists with building a tabluar representation of a data processing pipeline. The table is fully evaluated, for example, by checking station parameters and time intervals, prior to performing processing functions within \code{ipayipi::dt_process()}. Once fully evaluated the function parameters (\code{f_params}) for processing data are stored in a station file. Once stored partial evaluation is not necessary until the pipeline sequence requires updating.
}
\examples{
## generate a basic processing pipeline

# first harvest data
# note the aggregation period is specified in the harvesting step
# as data is harvested based on the specified time interval
pipe_seq1 <- pipe_seq(p = pdt(
   p_step(
     dt_n = 1,
     dtp_n = 1,
     f = "dt_harvest",
     f_params = hsf_param_eval()
   ),
# then aggregate data by month
   p_step(
     dt_n = 1,
     dtp_n = 2,
     f = "dt_agg",
     f_params = agg_param_eval(
       rain_tot = agg_params(phen_out_name = "rain",
         agg_f = "mean(x)", units = "mm", measure = "avg"),
         agg_offset = c("0 sec", "0 sec"), all_phens = TRUE))
       )
   )
print(pipe_seq1)


}
\author{
Paul J. Gordijn
}
